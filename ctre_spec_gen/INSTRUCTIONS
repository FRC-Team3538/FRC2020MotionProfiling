You need to have downloaded all the following dependencies to expand the macros:
    - ctre api-cpp-<version>-headers
    - ctre core-<version>-headers
    - ctre cci-<version>-headers
    - ctre wpiapi-cpp-<version>-headers
    - wpilib wpilibc-cpp-<version>-headers
    - wpilib wpiutil-cpp-<version>-headers
    - wpilib ntcore-cpp-<version>-headers
    - wpilib hal-cpp-<version>-headers

Steps to create a valid generated serializer file:
1. gcc -E ctre_spec_gen/ctreJsonSerde.hpp -I/path/to/api-cpp-5.19.4-headers/ -I/path/to/core-5.19.4-headers/ -I/path/to/cci-5.19.4-headers/ -I/path/to/wpiapi-cpp-5.19.4-headers/ -I/path/to/wpilibc-cpp-2021.1.2-headers/ -I/path/to/wpiutil-cpp-2021.1.2-headers/ -I/path/to/ntcore-cpp-2021.1.2-headers/ -I/path/to/hal-cpp-2021.1.2-headers/ -I/path/to/wpimath-cpp-2021.1.2-headers/
    - Take only the last few thousand lines - this starts with:
        #pragma GCC diagnostic pop
        # 6 "src/main/include/lib/ctreJsonSerde.hpp" 2

2. Replace first two lines with:
    #pragma once
    #include <ctre/Phoenix.h>


3. Replace all instances of nlohmann::json with wpi::json
    - Simple text find/replace


3. Replace all get_to calls with something else
    - TODO - when was this implemented in nlohmann/json and what did it replace?
    - This is going to be a complicated regex to start but it'll probably be more work :(

    void from_json(const json& j, person& p) {	            |   void from_json(const json& j, person& p) {
        p.name = j.at("name").get<std::string>();	        |       j.at("name").get_to(p.name);
        p.address = j.at("address").get<std::string>();	    |       j.at("address").get_to(p.address);
        p.age = j.at("age").get<int>();	                    |       j.at("age").get_to(p.age);
    }	                                                    |   }

    NOTE:
        The function is equivalent to executing
        @code {.cpp}
        ValueType v;
        JSONSerializer<ValueType>::from_json(*this, v);
        @endcode

    - Proper solution requires knowing the type information for all of the possible fields, which is difficult, to say the least. 
    - BUT, it would give us the proper backport we need.
    - That's probably a longer term project where we'll write a python script or something to generate valid c++.
    - apparently this find/replace works and I am super not convinced it's correct.
    - REGEX SHOULD NOT BE THIS POWERFUL, C++
    - this is sus af
        /(.*)(?:\s|\n)*.get_to\((.*)\)/wpi::adl_serializer<decltype($2), void>::from_json($1, $2)/
