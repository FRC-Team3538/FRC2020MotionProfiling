# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rj

import flatbuffers

class StatusFrameCollection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStatusFrameCollection(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatusFrameCollection()
        x.Init(buf, n + offset)
        return x

    # StatusFrameCollection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatusFrameCollection
    def DriveLeft1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .CTREMotorStatusFrame import CTREMotorStatusFrame
            obj = CTREMotorStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusFrameCollection
    def DriveLeft2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .CTREMotorStatusFrame import CTREMotorStatusFrame
            obj = CTREMotorStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusFrameCollection
    def DriveRight1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .CTREMotorStatusFrame import CTREMotorStatusFrame
            obj = CTREMotorStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusFrameCollection
    def DriveRight2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .CTREMotorStatusFrame import CTREMotorStatusFrame
            obj = CTREMotorStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusFrameCollection
    def PowerDistributionPanel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .PDPStatusFrame import PDPStatusFrame
            obj = PDPStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusFrameCollection
    def PneumaticsControlModule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .PCMStatusFrame import PCMStatusFrame
            obj = PCMStatusFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StatusFrameCollectionStart(builder): builder.StartObject(6)
def StatusFrameCollectionAddDriveLeft1(builder, driveLeft1): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(driveLeft1), 0)
def StatusFrameCollectionAddDriveLeft2(builder, driveLeft2): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(driveLeft2), 0)
def StatusFrameCollectionAddDriveRight1(builder, driveRight1): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(driveRight1), 0)
def StatusFrameCollectionAddDriveRight2(builder, driveRight2): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(driveRight2), 0)
def StatusFrameCollectionAddPowerDistributionPanel(builder, powerDistributionPanel): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(powerDistributionPanel), 0)
def StatusFrameCollectionAddPneumaticsControlModule(builder, pneumaticsControlModule): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pneumaticsControlModule), 0)
def StatusFrameCollectionEnd(builder): return builder.EndObject()
