# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rj

import flatbuffers

class CTREMotorStatusFrame(object):
    __slots__ = ['_tab']

    # CTREMotorStatusFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CTREMotorStatusFrame
    def FirmwareVersion(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # CTREMotorStatusFrame
    def BaseID(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # CTREMotorStatusFrame
    def DeviceID(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # CTREMotorStatusFrame
    def OutputCurrent(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # CTREMotorStatusFrame
    def BusVoltage(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # CTREMotorStatusFrame
    def OutputPercent(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # CTREMotorStatusFrame
    def OutputVoltage(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # CTREMotorStatusFrame
    def Temperature(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # CTREMotorStatusFrame
    def SelectedSensorPosition(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # CTREMotorStatusFrame
    def SelectedSensorVelocity(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))
    # CTREMotorStatusFrame
    def ClosedLoopError(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(64))
    # CTREMotorStatusFrame
    def IntegralAccumulator(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(72))
    # CTREMotorStatusFrame
    def ErrorDerivative(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(80))
    # CTREMotorStatusFrame
    def ClosedLoopTarget(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(88))
    # CTREMotorStatusFrame
    def ActiveTrajectoryPosition(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(96))
    # CTREMotorStatusFrame
    def ActiveTrajectoryVelocity(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(100))
    # CTREMotorStatusFrame
    def ActiveTrajectoryArbFeedFwd(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(104))
    # CTREMotorStatusFrame
    def Faults(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(112))
    # CTREMotorStatusFrame
    def ResetOccured(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(116))
    # CTREMotorStatusFrame
    def LastError(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(120))
    # CTREMotorStatusFrame
    def ControlMode(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(124))
    # CTREMotorStatusFrame
    def StatorCurrent(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(128))
    # CTREMotorStatusFrame
    def SupplyCurrent(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(136))
    # CTREMotorStatusFrame
    def FwdLimitSwitchClosed(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(144))
    # CTREMotorStatusFrame
    def RevLimitSwitchClosed(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(148))

def CreateCTREMotorStatusFrame(builder, firmwareVersion, baseID, deviceID, outputCurrent, busVoltage, outputPercent, outputVoltage, temperature, selectedSensorPosition, selectedSensorVelocity, closedLoopError, integralAccumulator, errorDerivative, closedLoopTarget, activeTrajectoryPosition, activeTrajectoryVelocity, activeTrajectoryArbFeedFwd, faults, resetOccured, lastError, controlMode, statorCurrent, supplyCurrent, fwdLimitSwitchClosed, revLimitSwitchClosed):
    builder.Prep(8, 152)
    builder.PrependInt32(revLimitSwitchClosed)
    builder.PrependInt32(fwdLimitSwitchClosed)
    builder.PrependFloat64(supplyCurrent)
    builder.PrependFloat64(statorCurrent)
    builder.PrependInt32(controlMode)
    builder.PrependInt32(lastError)
    builder.Pad(3)
    builder.PrependBool(resetOccured)
    builder.PrependInt32(faults)
    builder.PrependFloat64(activeTrajectoryArbFeedFwd)
    builder.PrependInt32(activeTrajectoryVelocity)
    builder.PrependInt32(activeTrajectoryPosition)
    builder.PrependFloat64(closedLoopTarget)
    builder.PrependFloat64(errorDerivative)
    builder.PrependFloat64(integralAccumulator)
    builder.Pad(4)
    builder.PrependInt32(closedLoopError)
    builder.PrependInt32(selectedSensorVelocity)
    builder.PrependInt32(selectedSensorPosition)
    builder.PrependFloat64(temperature)
    builder.PrependFloat64(outputVoltage)
    builder.PrependFloat64(outputPercent)
    builder.PrependFloat64(busVoltage)
    builder.PrependFloat64(outputCurrent)
    builder.Pad(4)
    builder.PrependInt32(deviceID)
    builder.PrependInt32(baseID)
    builder.PrependInt32(firmwareVersion)
    return builder.Offset()
